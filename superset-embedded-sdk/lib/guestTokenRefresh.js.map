{"version":3,"file":"guestTokenRefresh.js","names":["_jwtDecode","_interopRequireDefault","require","obj","__esModule","default","REFRESH_TIMING_BUFFER_MS","exports","MIN_REFRESH_WAIT_MS","DEFAULT_TOKEN_EXP_MS","getGuestTokenRefreshTiming","currentGuestToken","parsedJwt","jwt_decode","exp","Date","test","parseFloat","isValidDate","toString","ttl","Math","max","getTime","now"],"sources":["../src/guestTokenRefresh.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport jwt_decode from \"jwt-decode\";\n\nexport const REFRESH_TIMING_BUFFER_MS = 5000 // refresh guest token early to avoid failed superset requests\nexport const MIN_REFRESH_WAIT_MS = 10000 // avoid blasting requests as fast as the cpu can handle\nexport const DEFAULT_TOKEN_EXP_MS = 300000 // (5 min) used only when parsing guest token exp fails\n\n// when do we refresh the guest token?\nexport function getGuestTokenRefreshTiming(currentGuestToken: string) {\n  const parsedJwt = jwt_decode<Record<string, any>>(currentGuestToken);\n  // if exp is int, it is in seconds, but Date() takes milliseconds\n  const exp = new Date(/[^0-9\\.]/g.test(parsedJwt.exp) ? parsedJwt.exp : parseFloat(parsedJwt.exp) * 1000);\n  const isValidDate = exp.toString() !== 'Invalid Date';\n  const ttl = isValidDate ? Math.max(MIN_REFRESH_WAIT_MS, exp.getTime() - Date.now()) : DEFAULT_TOKEN_EXP_MS;\n  return ttl - REFRESH_TIMING_BUFFER_MS;\n}\n"],"mappings":";;;;;;;AAkBA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAoC,SAAAD,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAlBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGO,MAAMG,wBAAwB,GAAAC,OAAA,CAAAD,wBAAA,GAAG,IAAI,EAAC;AACtC,MAAME,mBAAmB,GAAAD,OAAA,CAAAC,mBAAA,GAAG,KAAK,EAAC;AAClC,MAAMC,oBAAoB,GAAAF,OAAA,CAAAE,oBAAA,GAAG,MAAM,EAAC;;AAE3C;AACO,SAASC,0BAA0BA,CAACC,iBAAyB,EAAE;EACpE,MAAMC,SAAS,GAAG,IAAAC,kBAAU,EAAsBF,iBAAiB,CAAC;EACpE;EACA,MAAMG,GAAG,GAAG,IAAIC,IAAI,CAAC,WAAW,CAACC,IAAI,CAACJ,SAAS,CAACE,GAAG,CAAC,GAAGF,SAAS,CAACE,GAAG,GAAGG,UAAU,CAACL,SAAS,CAACE,GAAG,CAAC,GAAG,IAAI,CAAC;EACxG,MAAMI,WAAW,GAAGJ,GAAG,CAACK,QAAQ,CAAC,CAAC,KAAK,cAAc;EACrD,MAAMC,GAAG,GAAGF,WAAW,GAAGG,IAAI,CAACC,GAAG,CAACd,mBAAmB,EAAEM,GAAG,CAACS,OAAO,CAAC,CAAC,GAAGR,IAAI,CAACS,GAAG,CAAC,CAAC,CAAC,GAAGf,oBAAoB;EAC1G,OAAOW,GAAG,GAAGd,wBAAwB;AACvC"}